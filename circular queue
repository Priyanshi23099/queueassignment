class MyCircularQueue:

    def __init__(self, k: int):
        self.data = [0] * k
        self.maxSize = k
        self.front = 0
        self.rear = -1
        

    def enQueue(self, value: int) -> bool:
        if self.isFull(): return False
        self.rear = (self.rear + 1) % self.maxSize
        self.data[self.rear] = value
        return True
        

    def deQueue(self) -> bool:
        if self.isEmpty(): return False
        if self.front == self.rear: self.front, self.rear = 0, -1
        else: self.front = (self.front + 1) % self.maxSize
        return True
        

    def Front(self) -> int:
        return -1 if self.isEmpty() else self.data[self.front]
        

    def Rear(self) -> int:
        return -1 if self.isEmpty() else self.data[self.rear]
        

    def isEmpty(self) -> bool:
        return self.rear == -1
        

    def isFull(self) -> bool:
         return not self.isEmpty() and (self.rear + 1) % self.maxSize == self.front
        
